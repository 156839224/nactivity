<?xml version="1.0" encoding="UTF-8" ?>

<!--
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<SmartSqlMap Scope="org.activiti.engine.impl.persistence.entity.HistoricTaskInstanceEntityImpl"  xmlns="http://SmartSql.net/schemas/SmartSqlMap.xsd">

  <!-- HISTORIC TASK INSTANCE RESULT MAP -->

  <ResultMap Id="historicTaskInstanceResultMap" ResultType="org.activiti.engine.impl.persistence.entity.HistoricTaskInstanceEntityImpl,Sys.Bpm.Engine">
    <Result Property="id" Column="ID_" />
    <Result Property="processDefinitionId" Column="PROC_DEF_ID_" />
    <Result Property="processInstanceId" Column="PROC_INST_ID_" />
    <Result Property="executionId" Column="EXECUTION_ID_" />
    <Result Property="name" Column="NAME_" />
    <Result Property="parentTaskId" Column="PARENT_TASK_ID_" />
    <Result Property="description" Column="DESCRIPTION_" />
    <Result Property="owner" Column="OWNER_" />
    <Result Property="assignee" Column="ASSIGNEE_" />
    <Result Property="startTime" Column="START_TIME_" />
    <Result Property="claimTime" Column="CLAIM_TIME_" />
    <Result Property="endTime" Column="END_TIME_" />
    <Result Property="durationInMillis" Column="DURATION_" />
    <Result Property="deleteReason" Column="DELETE_REASON_" />
    <Result Property="taskDefinitionKey" Column="TASK_DEF_KEY_" />
    <Result Property="formKey" Column="FORM_KEY_" />
    <Result Property="priority" Column="PRIORITY_" />
    <Result Property="dueDate" Column="DUE_DATE_" />
    <Result Property="category" Column="CATEGORY_" />
    <Result Property="tenantId" Column="TENANT_ID_" />
  </ResultMap>

  <!--<collection property="queryVariables" column="TASK_ID_" javaType="ArrayList" ofType="org.activiti.engine.impl.persistence.entity.HistoricVariableInstanceEntity">
      <id property="id" column="VAR_ID_"/>
      <Result Property="name" Column="VAR_NAME_" />
      <Result Property="variableType" Column="VAR_TYPE_" />
      <Result Property="revision" Column="VAR_REV_" />
      <Result Property="processInstanceId" Column="VAR_PROC_INST_ID_" />
      <Result Property="executionId" Column="VAR_EXECUTION_ID_" />
      <Result Property="taskId" Column="VAR_TASK_ID_" />
      <Result Property="byteArrayRef" Column="VAR_BYTEARRAY_ID_" />
      <Result Property="doubleValue" Column="VAR_DOUBLE_" />
      <Result Property="textValue" Column="VAR_TEXT_" />
      <Result Property="textValue2" Column="VAR_TEXT2_" />
      <Result Property="longValue" Column="VAR_LONG_" />
    </collection>-->

  <ResultMap Id="historicTaskInstanceAndVariablesResultMap" ResultType="org.activiti.engine.impl.persistence.entity.HistoricTaskInstanceEntityImpl,Sys.Bpm.Engine">
    <Result Property="id" Column="ID_" />
    <Result Property="processDefinitionId" Column="PROC_DEF_ID_" />
    <Result Property="processInstanceId" Column="PROC_INST_ID_" />
    <Result Property="executionId" Column="EXECUTION_ID_" />
    <Result Property="name" Column="NAME_" />
    <Result Property="parentTaskId" Column="PARENT_TASK_ID_" />
    <Result Property="description" Column="DESCRIPTION_" />
    <Result Property="owner" Column="OWNER_" />
    <Result Property="assignee" Column="ASSIGNEE_" />
    <Result Property="startTime" Column="START_TIME_" />
    <Result Property="claimTime" Column="CLAIM_TIME_" />
    <Result Property="endTime" Column="END_TIME_" />
    <Result Property="durationInMillis" Column="DURATION_" />
    <Result Property="deleteReason" Column="DELETE_REASON_" />
    <Result Property="taskDefinitionKey" Column="TASK_DEF_KEY_" />
    <Result Property="formKey" Column="FORM_KEY_" />
    <Result Property="priority" Column="PRIORITY_" />
    <Result Property="dueDate" Column="DUE_DATE_" />
    <Result Property="category" Column="CATEGORY_" />
    <Result Property="tenantId" Column="TENANT_ID_" />
  </ResultMap>

  <!-- HISTORIC TASK INSTANCE INSERT -->

  <Insert Id="insertHistoricTaskInstance">
    insert into ACT_HI_TASKINST (
    ID_,
    PROC_DEF_ID_,
    PROC_INST_ID_,
    EXECUTION_ID_,
    NAME_,
    PARENT_TASK_ID_,
    DESCRIPTION_,
    OWNER_,
    ASSIGNEE_,
    START_TIME_,
    CLAIM_TIME_,
    END_TIME_,
    DURATION_,
    DELETE_REASON_,
    TASK_DEF_KEY_,
    FORM_KEY_,
    PRIORITY_,
    DUE_DATE_,
    CATEGORY_,
    TENANT_ID_
    ) values (
    #{id},
    #{processDefinitionId},
    #{processInstanceId},
    #{executionId},
    #{name},
    #{parentTaskId},
    #{description},
    #{owner},
    #{assignee},
    #{startTime},
    #{claimTime},
    #{endTime},
    #{durationInMillis},
    #{deleteReason},
    #{taskDefinitionKey},
    #{formKey},
    #{priority},
    #{dueDate},
    #{category},
    #{tenantId}
    )
  </Insert>

  <Insert Id="bulkInsertHistoricTaskInstance">
    insert into ACT_HI_TASKINST (
    ID_,
    PROC_DEF_ID_,
    PROC_INST_ID_,
    EXECUTION_ID_,
    NAME_,
    PARENT_TASK_ID_,
    DESCRIPTION_,
    OWNER_,
    ASSIGNEE_,
    START_TIME_,
    CLAIM_TIME_,
    END_TIME_,
    DURATION_,
    DELETE_REASON_,
    TASK_DEF_KEY_,
    FORM_KEY_,
    PRIORITY_,
    DUE_DATE_,
    CATEGORY_,
    TENANT_ID_
    ) values
    <For Property="Items" Key="p" Separator=",">
      (#{id},
      #{processDefinitionId},
      #{processInstanceId},
      #{executionId},
      #{name},
      #{parentTaskId},
      #{description},
      #{owner},
      #{assignee},
      #{startTime},
      #{claimTime},
      #{endTime},
      #{durationInMillis},
      #{deleteReason},
      #{taskDefinitionKey},
      #{formKey},
      #{priority},
      #{dueDate},
      #{category},
      #{tenantId})
    </For>
  </Insert>

  <!-- HISTORIC TASK INSTANCE UPDATE -->

  <Update Id="updateHistoricTaskInstance">
    update ACT_HI_TASKINST set
    PROC_DEF_ID_ = #{processDefinitionId},
    EXECUTION_ID_ = #{executionId},
    NAME_ = #{name},
    PARENT_TASK_ID_ = #{parentTaskId},
    DESCRIPTION_ = #{description},
    OWNER_ = #{owner},
    ASSIGNEE_ = #{assignee},
    CLAIM_TIME_ = #{claimTime},
    END_TIME_ = #{endTime},
    DURATION_ = #{durationInMillis},
    DELETE_REASON_ = #{deleteReason},
    TASK_DEF_KEY_ = #{taskDefinitionKey},
    FORM_KEY_ = #{formKey},
    PRIORITY_ = #{priority},
    DUE_DATE_ = #{dueDate},
    CATEGORY_ = #{category}
    where ID_ = #{id}
  </Update>

  <!-- HISTORIC TASK INSTANCE DELETE -->

  <Delete Id="deleteHistoricTaskInstance">
    delete from ACT_HI_TASKINST where ID_ = #{id}
  </Delete>

  <Delete Id="bulkDeleteHistoricTaskInstance">
    delete from ACT_HI_TASKINST where
    <For Key="p" Property="Items" Separator=" or ">
      ID_ = #{task.id}
    </For>
  </Delete>

  <!-- HISTORIC TASK INSTANCE SELECT -->

  <Statement Id="executionVariableOperator">
    <Switch>
      <Case Property="queryVar.operator.equals('EQUALS')">=</Case>
      <Case Property="queryVar.operator.equals('EQUALS_IGNORE_CASE')">=</Case>
      <Case Property="queryVar.operator.equals('NOT_EQUALS')">&lt;&gt;</Case>
      <Case Property="queryVar.operator.equals('NOT_EQUALS_IGNORE_CASE')">&lt;&gt;</Case>
      <Case Property="queryVar.operator.equals('GREATER_THAN')">&gt;</Case>
      <Case Property="queryVar.operator.equals('GREATER_THAN_OR_EQUAL')">&gt;=</Case>
      <Case Property="queryVar.operator.equals('LESS_THAN')">&lt;</Case>
      <Case Property="queryVar.operator.equals('LESS_THAN_OR_EQUAL')">&lt;=</Case>
    </Switch>
  </Statement>

  <Statement Id="commonSelectHistoricTaskInstancesByQueryCriteriaSql">
    <IsNotNull Property="candidateUser != null || candidateGroups != null || involvedGroups != null">
      inner join ACT_HI_IDENTITYLINK HI on HI.TASK_ID_ = RES.ID_
    </IsNotNull>
    <IsNotNull Property="processFinished || processUnfinished || processInstanceBusinessKey != null || processInstanceBusinessKeyLike != null || processInstanceBusinessKeyLikeIgnoreCase != null">
      inner join ACT_HI_PROCINST HPI ON RES.PROC_INST_ID_ = HPI.ID_
    </IsNotNull>
    <IsNotNull Property="processDefinitionKey != null || processDefinitionKeyLike != null || processDefinitionKeyLikeIgnoreCase != null || processDefinitionName != null || processDefinitionNameLike != null || (processCategoryInList != null &amp;&amp; processCategoryInList.size() &gt; 0) || (processCategoryNotInList != null &amp;&amp; processCategoryNotInList.size() &gt; 0) || (processDefinitionKeys != null &amp;&amp; processDefinitionKeys.size() &gt; 0)">
      inner join ACT_RE_PROCDEF D on RES.PROC_DEF_ID_ = D.ID_
    </IsNotNull>
    <IsNotNull Property="deploymentId != null || (deploymentIds != null &amp;&amp; deploymentIds.size() &gt; 0)">
      left outer join ACT_RE_PROCDEF DEPLOY_P ON RES.PROC_DEF_ID_ = DEPLOY_P.ID_
    </IsNotNull>
    <For Property="queryVariableValues" Key="var">
      <Switch>
        <Case Property="var.local">
          inner join ACT_HI_VARINST A${index} on RES.ID_ = A${index}.TASK_ID_
        </Case>
        <Default>
          inner join ACT_HI_VARINST A${index} on RES.PROC_INST_ID_ = A${index}.PROC_INST_ID_
        </Default>
      </Switch>
    </For>
    <For Property="orQueryObjects" Key="orQueryObject">
      <IsNotNull Property="orQueryObject.candidateUser != null || orQueryObject.candidateGroups != null || orQueryObject.involvedGroups != null">
        <Switch>
          <Case Property="orQueryObject.involvedGroups != null">left</Case>
          <Default>inner</Default>
        </Switch>
        join ACT_HI_IDENTITYLINK HI_OR${orIndex} on HI_OR${orIndex}.TASK_ID_ = RES.ID_
      </IsNotNull>
      <IsTrue Property="orQueryObject.processFinished || orQueryObject.processUnfinished || orQueryObject.processInstanceBusinessKey != null || orQueryObject.processInstanceBusinessKeyLike != null || orQueryObject.processInstanceBusinessKeyLikeIgnoreCase != null">
        inner join ACT_HI_PROCINST HPI_OR${orIndex} ON RES.PROC_INST_ID_ = HPI_OR${orIndex}.ID_
      </IsTrue>
      <IsNotNull Property="orQueryObject.processDefinitionKey != null || orQueryObject.processDefinitionKeyLike != null || orQueryObject.processDefinitionKeyLikeIgnoreCase != null || orQueryObject.processDefinitionName != null || orQueryObject.processDefinitionNameLike != null || (orQueryObject.processCategoryInList != null &amp;&amp; orQueryObject.processCategoryInList.size() &gt; 0) || (orQueryObject.processCategoryNotInList != null &amp;&amp; orQueryObject.processCategoryNotInList.size() &gt; 0) || (orQueryObject.processDefinitionKeys != null &amp;&amp; orQueryObject.processDefinitionKeys.size() &gt; 0)">
        left outer join ACT_RE_PROCDEF D_OR${orIndex} on RES.PROC_DEF_ID_ = D_OR${orIndex}.ID_
      </IsNotNull>
      <IsNotNull Property="orQueryObject.deploymentId != null || (orQueryObject.deploymentIds != null &amp;&amp; orQueryObject.deploymentIds.size() &gt; 0)">
        left outer join ACT_RE_PROCDEF DEPLOY_P_OR${orIndex} ON RES.PROC_DEF_ID_ = DEPLOY_P_OR${orIndex}.ID_
      </IsNotNull>
      <IsNotNull Property="orQueryObject.queryVariableValues.size() &gt; 0">
        <IsTrue Property="orQueryObject.hasLocalQueryVariableValue()">
          left outer join ACT_HI_VARINST A_L_OR${orIndex} on RES.ID_ = A_L_OR${orIndex}.TASK_ID_
        </IsTrue>
        <IsNotNull Property="orQueryObject.hasNonLocalQueryVariableValue()">
          left outer join ACT_HI_VARINST A_OR${orIndex} on RES.PROC_INST_ID_ = A_OR${orIndex}.PROC_INST_ID_
        </IsNotNull>
      </IsNotNull>
    </For>
    <Where>
      <IsNotNull Property="taskId != null">
        RES.ID_ = #{taskId}
      </IsNotNull>
      <IsNotNull Property="processDefinitionId != null">
        and RES.PROC_DEF_ID_ = #{processDefinitionId}
      </IsNotNull>
      <IsNotNull Property="processDefinitionKey != null">
        and D.KEY_ = #{processDefinitionKey}
      </IsNotNull>
      <IsNotNull Property="processDefinitionKeyLike != null">
        and D.KEY_ like #{processDefinitionKeyLike}${wildcardEscapeClause}
      </IsNotNull>
      <IsNotNull Property="processDefinitionKeyLikeIgnoreCase != null">
        and lower(D.KEY_) like #{processDefinitionKeyLikeIgnoreCase}${wildcardEscapeClause}
      </IsNotNull>
      <IsNotNull Property="processDefinitionKeys != null &amp;&amp; processDefinitionKeys.size() &gt; 0">
        and D.KEY_ in
        <For Key="item" Property="processDefinitionKeys" Open="(" Separator="," Close=")">
          #{item}
        </For>
      </IsNotNull>
      <IsNotNull Property="processDefinitionName != null">
        and D.NAME_ = #{processDefinitionName}
      </IsNotNull>
      <IsNotNull Property="processDefinitionNameLike != null">
        and D.NAME_ like #{processDefinitionNameLike}${wildcardEscapeClause}
      </IsNotNull>
      <IsNotNull Property="processCategoryInList != null &amp;&amp; processCategoryInList.size() &gt; 0">
        and D.CATEGORY_ IN
        <For Key="processCategory" Property="processCategoryInList"
                 open="(" separator="," close=")">
          #{processCategory}
        </For>
      </IsNotNull>
      <IsNotNull Property="processCategoryNotInList != null &amp;&amp; processCategoryNotInList.size() &gt; 0">
        and D.CATEGORY_ NOT IN
        <For Key="processCategory" Property="processCategoryNotInList" Open="(" Separator="," Close=")">
          #{processCategory}
        </For>
      </IsNotNull>
      <IsNotNull Property="deploymentId != null">
        and DEPLOY_P.DEPLOYMENT_ID_ = #{deploymentId}
      </IsNotNull>
      <IsNotNull Property="deploymentIds != null &amp;&amp; deploymentIds.size() &gt; 0">
        and DEPLOY_P.DEPLOYMENT_ID_ IN
        <For Key="deployment" Property="deploymentIds" Open="(" Separator="," Close=")">
          #{deployment}
        </For>
      </IsNotNull>
      <IsNotNull Property="processInstanceId != null">
        and RES.PROC_INST_ID_ = #{processInstanceId}
      </IsNotNull>
      <IsNotNull Property="processInstanceIds != null &amp;&amp; processInstanceIds.size() &gt; 0">
        and RES.PROC_INST_ID_ IN
        <For Key="processInstance" Property="processInstanceIds" Open="(" Separator="," Close=")">
          #{processInstance}
        </For>
      </IsNotNull>
      <IsNotNull Property="processInstanceBusinessKey != null">
        and HPI.BUSINESS_KEY_ = #{processInstanceBusinessKey}
      </IsNotNull>
      <IsNotNull Property="processInstanceBusinessKeyLike != null">
        and HPI.BUSINESS_KEY_ like #{processInstanceBusinessKeyLike}${wildcardEscapeClause}
      </IsNotNull>
      <IsNotNull Property="processInstanceBusinessKeyLikeIgnoreCase != null">
        and lower(HPI.BUSINESS_KEY_) like #{processInstanceBusinessKeyLikeIgnoreCase}${wildcardEscapeClause}
      </IsNotNull>
      <IsNotNull Property="taskDefinitionKey != null">
        and RES.TASK_DEF_KEY_ = #{taskDefinitionKey}
      </IsNotNull>
      <IsNotNull Property="taskDefinitionKeyLike != null">
        and RES.TASK_DEF_KEY_ like #{taskDefinitionKeyLike}${wildcardEscapeClause}
      </IsNotNull>
      <IsNotNull Property="executionId != null">
        and RES.EXECUTION_ID_ = #{executionId}
      </IsNotNull>
      <IsNotNull Property="taskName != null">
        and RES.NAME_ = #{taskName}
      </IsNotNull>
      <IsNotNull Property="taskNameLike != null">
        and RES.NAME_ like #{taskNameLike}${wildcardEscapeClause}
      </IsNotNull>
      <IsNotNull Property="taskNameLikeIgnoreCase != null">
        and lower(RES.NAME_) like #{taskNameLikeIgnoreCase}${wildcardEscapeClause}
      </IsNotNull>
      <IsNotNull Property="taskNameList != null &amp;&amp; taskNameList.size() &gt; 0">
        and RES.NAME_ IN
        <For Key="taskName" Property="taskNameList" Open="(" Separator="," Close=")">
          #{taskName}
        </For>
      </IsNotNull>
      <IsNotNull Property="taskNameListIgnoreCase != null &amp;&amp; taskNameListIgnoreCase.size() &gt; 0">
        and lower(RES.NAME_) IN
        <For Key="taskName" Property="taskNameListIgnoreCase" Open="(" Separator="," Close=")">
          #{taskName}
        </For>
      </IsNotNull>
      <IsNotNull Property="taskParentTaskId != null">
        and RES.PARENT_TASK_ID_ = #{taskParentTaskId}
      </IsNotNull>
      <IsNotNull Property="taskDescription != null">
        and RES.DESCRIPTION_ = #{taskDescription}
      </IsNotNull>
      <IsNotNull Property="taskDescriptionLike != null">
        and RES.DESCRIPTION_ like #{taskDescriptionLike}${wildcardEscapeClause}
      </IsNotNull>
      <IsNotNull Property="taskDescriptionLikeIgnoreCase != null">
        and lower(RES.DESCRIPTION_) like #{taskDescriptionLikeIgnoreCase}${wildcardEscapeClause}
      </IsNotNull>
      <IsNotNull Property="taskDeleteReason != null">
        and RES.DELETE_REASON_ = #{taskDeleteReason}
      </IsNotNull>
      <IsNotNull Property="taskDeleteReasonLike != null">
        and RES.DELETE_REASON_ like #{taskDeleteReasonLike}${wildcardEscapeClause}
      </IsNotNull>
      <IsNotNull Property="taskOwner != null">
        and RES.OWNER_ = #{taskOwner}
      </IsNotNull>
      <IsNotNull Property="taskOwnerLike != null">
        and RES.OWNER_ like #{taskOwnerLike}${wildcardEscapeClause}
      </IsNotNull>
      <IsNotNull Property="taskOwnerLikeIgnoreCase != null">
        and lower(RES.OWNER_) like #{taskOwnerLikeIgnoreCase}${wildcardEscapeClause}
      </IsNotNull>
      <IsNotNull Property="taskAssignee != null">
        and RES.ASSIGNEE_ = #{taskAssignee}
      </IsNotNull>
      <IsNotNull Property="taskAssigneeLike != null">
        and RES.ASSIGNEE_ like #{taskAssigneeLike}${wildcardEscapeClause}
      </IsNotNull>
      <IsNotNull Property="taskAssigneeLikeIgnoreCase != null">
        and lower(RES.ASSIGNEE_) like #{taskAssigneeLikeIgnoreCase}${wildcardEscapeClause}
      </IsNotNull>
      <IsNotNull Property="taskPriority != null">
        and RES.PRIORITY_ = #{taskPriority}
      </IsNotNull>
      <IsNotNull Property="taskMinPriority != null">
        and RES.PRIORITY_ &gt;= #{taskMinPriority}
      </IsNotNull>
      <IsNotNull Property="taskMaxPriority != null">
        and RES.PRIORITY_ &lt;= #{taskMaxPriority}
      </IsNotNull>
      <IsNotNull Property="unfinished">
        and RES.END_TIME_ is null
      </IsNotNull>
      <IsNotNull Property="finished">
        and RES.END_TIME_ is not null
      </IsNotNull>
      <IsNotNull Property="processFinished">
        and HPI.END_TIME_ is not null
      </IsNotNull>
      <IsNotNull Property="processUnfinished">
        and HPI.END_TIME_ is null
      </IsNotNull>
      <IsNotNull Property="dueDate != null">
        and RES.DUE_DATE_ = #{dueDate}
      </IsNotNull>
      <IsNotNull Property="dueBefore != null">
        and RES.DUE_DATE_ &lt; #{dueBefore}
      </IsNotNull>
      <IsNotNull Property="dueAfter != null">
        and RES.DUE_DATE_ &gt; #{dueAfter}
      </IsNotNull>
      <IsNotNull Property="withoutDueDate">
        and RES.DUE_DATE_ is null
      </IsNotNull>
      <IsNotNull Property="creationDate != null">
        and RES.START_TIME_ = #{creationDate}
      </IsNotNull>
      <IsNotNull Property="creationBeforeDate != null">
        and RES.START_TIME_ &lt; #{creationBeforeDate}
      </IsNotNull>
      <IsNotNull Property="creationAfterDate != null">
        and RES.START_TIME_ &gt; #{creationAfterDate}
      </IsNotNull>
      <IsNotNull Property="completedDate != null">
        and RES.END_TIME_ = #{completedDate}
      </IsNotNull>
      <IsNotNull Property="completedBeforeDate != null">
        and RES.END_TIME_ &lt; #{completedBeforeDate}
      </IsNotNull>
      <IsNotNull Property="completedAfterDate != null">
        and RES.END_TIME_ &gt; #{completedAfterDate}
      </IsNotNull>
      <IsNotNull Property="category != null">
        and RES.CATEGORY_ = #{category}
      </IsNotNull>
      <IsNotNull Property="tenantId != null">
        and RES.TENANT_ID_ = #{tenantId}
      </IsNotNull>
      <IsNotNull Property="tenantIdLike != null">
        and RES.TENANT_ID_ like #{tenantIdLike}${wildcardEscapeClause}
      </IsNotNull>
      <IsTrue Property="withoutTenantId">
        and (RES.TENANT_ID_ = '' or RES.TENANT_ID_ is null)
      </IsTrue>
      <IsNotNull Property="candidateUser != null || candidateGroups != null">
        and RES.ASSIGNEE_ is null
        and HI.TYPE_ = 'candidate'
        and
        (
        <IsNotNull Property="candidateUser != null">
          HI.USER_ID_ = #{candidateUser}
        </IsNotNull>
        <IsNotNull Property="candidateUser != null &amp;&amp; candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0">
          or
        </IsNotNull>
        <IsNotNull Property="candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0">
          HI.GROUP_ID_ IN
          <For Key="group" Property="candidateGroups" Open="(" Separator="," Close=")">
            #{group}
          </For>
        </IsNotNull>
        )
      </IsNotNull>
      <IsNotNull Property="involvedUser != null">
        and
        (
        exists(select LINK.USER_ID_ from ACT_HI_IDENTITYLINK LINK where USER_ID_ = #{involvedUser} and LINK.TASK_ID_ = RES.ID_)
        or RES.ASSIGNEE_ = #{involvedUser}
        or RES.OWNER_ = #{involvedUser}
        )
      </IsNotNull>
      <IsNotNull Property="involvedGroups != null &amp;&amp; involvedGroups.size() &gt; 0">
        and
        (
        HI.TYPE_ = 'participant'
        and
        HI.GROUP_ID_ IN
        <For Key="group" Property="involvedGroups" Open="(" Separator="," Close=")">
          #{group}
        </For>
        )
      </IsNotNull>
      <For Key="queryVar" Property="queryVariableValues">
        <IsTrue Property="!queryVar.local">
          <!-- When process instance variable is queried for, taskId should be null -->
          and A${index}.TASK_ID_ is null
        </IsTrue>
        <IsNotNull Property="queryVar.name != null">
          <!-- Match-all variable-names when name is null -->
          and A${index}.NAME_= #{queryVar.name}
        </IsNotNull>
        <IsTrue Property="!queryVar.type.equals('null')">
          and A${index}.VAR_TYPE_ = #{queryVar.type}
        </IsTrue>
        <!-- Variable value -->
        <IsNotNull Property="queryVar.textValue != null &amp;&amp; queryVar.longValue == null &amp;&amp; queryVar.doubleValue == null">
          <Switch>
            <Case Property="queryVar.operator.equals('EQUALS_IGNORE_CASE') || queryVar.operator.equals('NOT_EQUALS_IGNORE_CASE') || queryVar.operator.equals('LIKE_IGNORE_CASE')">
              and lower(A${index}.TEXT_)
            </Case>
            <Default>
              and A${index}.TEXT_
            </Default>
          </Switch>
          <Switch>
            <Case Property="queryVar.operator.equals('LIKE') || queryVar.operator.equals('LIKE_IGNORE_CASE')">LIKE</Case>
            <Default>
              <Include RefId="executionVariableOperator" />
            </Default>
          </Switch>
          #{queryVar.textValue}
          <Switch>
            <Case Property="queryVar.operator.equals('LIKE') || queryVar.operator.equals('LIKE_IGNORE_CASE')">${wildcardEscapeClause}</Case>
          </Switch>
        </IsNotNull>
        <IsNotNull Property="queryVar.textValue2 != null">
          and A${index}.TEXT2_
          <Switch>
            <Case Property="queryVar.operator.equals('LIKE')">LIKE</Case>
            <Default>
              <Include RefId="executionVariableOperator" />
            </Default>
          </Switch>
          #{queryVar.textValue2}
          <Switch>
            <Case Property="queryVar.operator.equals('LIKE')">${wildcardEscapeClause}</Case>
          </Switch>
        </IsNotNull>
        <IsNotNull Property="queryVar.longValue != null">
          and A${index}.LONG_
          <Include RefId="executionVariableOperator" />
          #{queryVar.longValue}
        </IsNotNull>
        <IsNotNull Property="queryVar.doubleValue != null">
          and A${index}.DOUBLE_
          <Include RefId="executionVariableOperator" />
          #{queryVar.doubleValue}
        </IsNotNull>
        <!-- Null variable type -->
        <IsNotNull Property="queryVar.textValue == null &amp;&amp; queryVar.textValue2 == null &amp;&amp; queryVar.longValue == null &amp;&amp; queryVar.doubleValue == null">
          <Switch>
            <Case Property="queryVar.operator.equals('NOT_EQUALS')">
              and (A${index}.TEXT_ is not null or A${index}.TEXT2_ is not null or A${index}.LONG_ is not null or A${index}.DOUBLE_ is not null or A${index}.BYTEARRAY_ID_ is not null)
            </Case>
            <Default>
              and A${index}.TEXT_ is null and A${index}.TEXT2_ is null and A${index}.LONG_ is null and A${index}.DOUBLE_ is null and A${index}.BYTEARRAY_ID_ is null
            </Default>
          </Switch>
        </IsNotNull>
      </For>
      <For Key="orQueryObject" Property="orQueryObjects">
        and
        <IsNotNull Property="orQueryObject.taskId != null">
          RES.ID_ = #{orQueryObject.taskId}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.processDefinitionId != null">
          or RES.PROC_DEF_ID_ = #{orQueryObject.processDefinitionId}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.processDefinitionKey != null">
          or D_OR${orIndex}.KEY_ = #{orQueryObject.processDefinitionKey}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.processDefinitionKeyLike != null">
          or D_OR${orIndex}.KEY_ like #{orQueryObject.processDefinitionKeyLike}${wildcardEscapeClause}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.processDefinitionKeyLikeIgnoreCase != null">
          or lower(D_OR${orIndex}.KEY_) like #{orQueryObject.processDefinitionKeyLikeIgnoreCase}${wildcardEscapeClause}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.processDefinitionKeys != null &amp;&amp; orQueryObject.processDefinitionKeys.size() &gt; 0">
          or D_OR${orIndex}.KEY_ in
          <For Key="item" Property="orQueryObject.processDefinitionKeys" Open="(" Separator="," Close=")">
            #{item}
          </For>
        </IsNotNull>
        <IsNotNull Property="orQueryObject.processDefinitionName != null">
          or D_OR${orIndex}.NAME_ = #{orQueryObject.processDefinitionName}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.processDefinitionNameLike != null">
          or D_OR${orIndex}.NAME_ like #{orQueryObject.processDefinitionNameLike}${wildcardEscapeClause}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.processCategoryInList != null &amp;&amp; orQueryObject.processCategoryInList.size() &gt; 0">
          or D_OR${orIndex}.CATEGORY_ IN
          <For Key="processCategory" Property="orQueryObject.processCategoryInList" Open="(" Separator="," Close=")">
            #{processCategory}
          </For>
        </IsNotNull>
        <IsNotNull Property="orQueryObject.processCategoryNotInList != null &amp;&amp; orQueryObject.processCategoryNotInList.size() &gt; 0">
          or D_OR${orIndex}.CATEGORY_ NOT IN
          <For Key="processCategory" Property="orQueryObject.processCategoryNotInList" Open="(" Separator="," Close=")">
            #{processCategory}
          </For>
        </IsNotNull>
        <IsNotNull Property="orQueryObject.deploymentId != null">
          or DEPLOY_P_OR${orIndex}.DEPLOYMENT_ID_ = #{orQueryObject.deploymentId}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.deploymentIds != null &amp;&amp; orQueryObject.deploymentIds.size() &gt; 0">
          or DEPLOY_P_OR${orIndex}.DEPLOYMENT_ID_ IN
          <For Key="deployment" Property="orQueryObject.deploymentIds" Open="(" Separator="," Close=")">
            #{deployment}
          </For>
        </IsNotNull>
        <IsNotNull Property="orQueryObject.processInstanceId != null">
          or RES.PROC_INST_ID_ = #{orQueryObject.processInstanceId}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.processInstanceIds != null &amp;&amp; orQueryObject.processInstanceIds.size() &gt; 0">
          or RES.PROC_INST_ID_ IN
          <For Key="processInstance" Property="orQueryObject.processInstanceIds" Open="(" Separator="," Close=")">
            #{processInstance}
          </For>
        </IsNotNull>
        <IsNotNull Property="orQueryObject.processInstanceBusinessKey != null">
          or HPI_OR${orIndex}.BUSINESS_KEY_ = #{orQueryObject.processInstanceBusinessKey}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.processInstanceBusinessKeyLike != null">
          or HPI_OR${orIndex}.BUSINESS_KEY_ like #{orQueryObject.processInstanceBusinessKeyLike}${wildcardEscapeClause}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.processInstanceBusinessKeyLikeIgnoreCase != null">
          or lower(HPI_OR${orIndex}.BUSINESS_KEY_) like #{orQueryObject.processInstanceBusinessKeyLikeIgnoreCase}${wildcardEscapeClause}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.taskDefinitionKey != null">
          or RES.TASK_DEF_KEY_ = #{orQueryObject.taskDefinitionKey}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.taskDefinitionKeyLike != null">
          or RES.TASK_DEF_KEY_ like #{orQueryObject.taskDefinitionKeyLike}${wildcardEscapeClause}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.executionId != null">
          or RES.EXECUTION_ID_ = #{orQueryObject.executionId}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.taskName != null">
          or RES.NAME_ = #{orQueryObject.taskName}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.taskNameLike != null">
          or RES.NAME_ like #{orQueryObject.taskNameLike}${wildcardEscapeClause}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.taskNameLikeIgnoreCase != null">
          or lower(RES.NAME_) like #{orQueryObject.taskNameLikeIgnoreCase}${wildcardEscapeClause}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.taskNameList != null &amp;&amp; orQueryObject.taskNameList.size() &gt; 0">
          or RES.NAME_ IN
          <For Key="taskName" Property="orQueryObject.taskNameList" Open="(" Separator="," Close=")">
            #{taskName}
          </For>
        </IsNotNull>
        <IsNotNull Property="orQueryObject.taskNameListIgnoreCase != null &amp;&amp; orQueryObject.taskNameListIgnoreCase.size() &gt; 0">
          or lower(RES.NAME_) IN
          <For Key="taskName" Property="orQueryObject.taskNameListIgnoreCase" Open="(" Separator="," Close=")">
            #{taskName}
          </For>
        </IsNotNull>
        <IsNotNull Property="orQueryObject.taskParentTaskId != null">
          or RES.PARENT_TASK_ID_ = #{orQueryObject.taskParentTaskId}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.taskDescription != null">
          or RES.DESCRIPTION_ = #{orQueryObject.taskDescription}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.taskDescriptionLike != null">
          or RES.DESCRIPTION_ like #{orQueryObject.taskDescriptionLike}${wildcardEscapeClause}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.taskDescriptionLikeIgnoreCase != null">
          or lower(RES.DESCRIPTION_) like #{orQueryObject.taskDescriptionLikeIgnoreCase}${wildcardEscapeClause}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.taskDeleteReason != null">
          or RES.DELETE_REASON_ = #{orQueryObject.taskDeleteReason}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.taskDeleteReasonLike != null">
          or RES.DELETE_REASON_ like #{orQueryObject.taskDeleteReasonLike}${wildcardEscapeClause}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.taskOwner != null">
          or RES.OWNER_ = #{orQueryObject.taskOwner}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.taskOwnerLike != null">
          or RES.OWNER_ like #{orQueryObject.taskOwnerLike}${wildcardEscapeClause}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.taskOwnerLikeIgnoreCase != null">
          or lower(RES.OWNER_) like #{orQueryObject.taskOwnerLikeIgnoreCase}${wildcardEscapeClause}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.taskAssignee != null">
          or RES.ASSIGNEE_ = #{orQueryObject.taskAssignee}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.taskAssigneeLike != null">
          or RES.ASSIGNEE_ like #{orQueryObject.taskAssigneeLike}${wildcardEscapeClause}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.taskAssigneeLikeIgnoreCase != null">
          or RES.ASSIGNEE_ like #{orQueryObject.taskAssigneeLikeIgnoreCase}${wildcardEscapeClause}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.taskPriority != null">
          or RES.PRIORITY_ = #{orQueryObject.taskPriority}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.taskMinPriority != null">
          or RES.PRIORITY_ &gt;= #{orQueryObject.taskMinPriority}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.taskMaxPriority != null">
          or RES.PRIORITY_ &lt;= #{orQueryObject.taskMaxPriority}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.unfinished">
          or RES.END_TIME_ is null
        </IsNotNull>
        <IsNotNull Property="orQueryObject.finished">
          or RES.END_TIME_ is not null
        </IsNotNull>
        <IsNotNull Property="orQueryObject.processFinished">
          or HPI_OR${orIndex}.END_TIME_ is not null
        </IsNotNull>
        <IsNotNull Property="orQueryObject.processUnfinished">
          or HPI_OR${orIndex}.END_TIME_ is null
        </IsNotNull>
        <IsNotNull Property="orQueryObject.dueDate != null">
          or RES.DUE_DATE_ = #{orQueryObject.dueDate}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.dueBefore != null">
          or RES.DUE_DATE_ &lt; #{orQueryObject.dueBefore}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.dueAfter != null">
          or RES.DUE_DATE_ &gt; #{orQueryObject.dueAfter}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.withoutDueDate">
          or RES.DUE_DATE_ is null
        </IsNotNull>
        <IsNotNull Property="orQueryObject.creationDate != null">
          or RES.START_TIME_ = #{orQueryObject.creationDate}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.creationBeforeDate != null">
          or RES.START_TIME_ &lt; #{orQueryObject.creationBeforeDate}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.creationAfterDate != null">
          or RES.START_TIME_ &gt; #{orQueryObject.creationAfterDate}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.completedDate != null">
          or RES.END_TIME_ = #{orQueryObject.completedDate}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.completedBeforeDate != null">
          or RES.END_TIME_ &lt; #{orQueryObject.completedBeforeDate}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.completedAfterDate != null">
          or RES.END_TIME_ &gt; #{orQueryObject.completedAfterDate}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.category != null">
          or RES.CATEGORY_ = #{orQueryObject.category}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.tenantId != null">
          or RES.TENANT_ID_ = #{orQueryObject.tenantId}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.tenantIdLike != null">
          or RES.TENANT_ID_ like #{orQueryObject.tenantIdLike}${wildcardEscapeClause}
        </IsNotNull>
        <IsNotNull Property="orQueryObject.withoutTenantId">
          or (RES.TENANT_ID_ = '' or RES.TENANT_ID_ is null)
        </IsNotNull>
        <IsNotNull Property="orQueryObject.candidateUser != null || orQueryObject.candidateGroups != null">
          or (RES.ASSIGNEE_ is null
          and HI_OR${orIndex}.TYPE_ = 'candidate'
          and
          (
          <IsNotNull Property="orQueryObject.candidateUser != null">
            HI_OR${orIndex}.USER_ID_ = #{orQueryObject.candidateUser}
          </IsNotNull>
          <IsNotNull Property="orQueryObject.candidateUser != null &amp;&amp; orQueryObject.candidateGroups != null &amp;&amp; orQueryObject.candidateGroups.size() &gt; 0">
            or
          </IsNotNull>
          <IsNotNull Property="orQueryObject.candidateGroups != null &amp;&amp; orQueryObject.candidateGroups.size() &gt; 0">
            HI_OR${orIndex}.GROUP_ID_ IN
            <For item="group" index="index" collection="orQueryObject.candidateGroups"
                     open="(" separator="," close=")">
              #{group}
            </For>
          </IsNotNull>
          ))
        </IsNotNull>
        <IsNotNull Property="orQueryObject.involvedUser != null">
          or
          (
          exists(select LINK.USER_ID_ from ACT_HI_IDENTITYLINK LINK where USER_ID_ = #{orQueryObject.involvedUser} and LINK.TASK_ID_ = RES.ID_)
          or RES.ASSIGNEE_ = #{orQueryObject.involvedUser}
          or RES.OWNER_ = #{orQueryObject.involvedUser}
          )
        </IsNotNull>
        <IsNotNull Property="orQueryObject.involvedGroups != null &amp;&amp; orQueryObject.involvedGroups.size() &gt; 0">
          or
          (
          HI_OR${orIndex}.TYPE_ = 'participant'
          and
          HI_OR${orIndex}.GROUP_ID_ IN
          <For Key="group" Property="orQueryObject.involvedGroups" Open="(" Separator="," Close=")">
            #{group}
          </For>
          )
        </IsNotNull>
        <For item="queryVar" collection="orQueryObject.queryVariableValues" index="index">
          or
          <Switch>
            <Case Property="!queryVar.local">
              <!--<bind name="orLocal" value="''" />
                   When process instance variable is queried for, taskId should be null -->
              and A_OR${orIndex}.TASK_ID_ is null
            </Case>
            <Default>
              <!--<bind name="orLocal" value="'L_'" />-->
            </Default>
          </Switch>
          <IsNotNull Property="queryVar.name != null">
            <!-- Match-all variable-names when name is null -->
            and A_${orLocal}OR${orIndex}.NAME_= #{queryVar.name}
          </IsNotNull>
          <IsEqual Property="!queryVar.type.equals('null')">
            and A_${orLocal}OR${orIndex}.VAR_TYPE_ = #{queryVar.type}
          </IsEqual>
          <!-- Variable value -->
          <IsNotNull Property="queryVar.textValue != null &amp;&amp; queryVar.longValue == null &amp;&amp; queryVar.doubleValue == null">
            <Switch>
              <Case Property="queryVar.operator.equals('EQUALS_IGNORE_CASE') || queryVar.operator.equals('NOT_EQUALS_IGNORE_CASE') || queryVar.operator.equals('LIKE_IGNORE_CASE')">
                and lower(A_${orLocal}OR${orIndex}.TEXT_)
              </Case>
              <Default>
                and A_${orLocal}OR${orIndex}.TEXT_
              </Default>
            </Switch>
            <Switch>
              <Case Property="queryVar.operator.equals('LIKE') || queryVar.operator.equals('LIKE_IGNORE_CASE')">LIKE</Case>
              <Default>
                <Include RefId="executionVariableOperator" />
              </Default>
            </Switch>
            #{queryVar.textValue}
            <Switch>
              <Case Property="queryVar.operator.equals('LIKE') || queryVar.operator.equals('LIKE_IGNORE_CASE')">${wildcardEscapeClause}</Case>
            </Switch>
          </IsNotNull>
          <IsNotNull Property="queryVar.textValue2 != null">
            and A_${orLocal}OR${orIndex}.TEXT2_
            <Switch>
              <Case Property="queryVar.operator.equals('LIKE')">LIKE</Case>
              <Default>
                <Include RefId="executionVariableOperator" />
              </Default>
            </Switch>
            #{queryVar.textValue2}
            <Switch>
              <Case Property="queryVar.operator.equals('LIKE')">${wildcardEscapeClause}</Case>
            </Switch>
          </IsNotNull>
          <IsNotNull Property="queryVar.longValue != null">
            and A_${orLocal}OR${orIndex}.LONG_
            <Include RefId="executionVariableOperator" />
            #{queryVar.longValue}
          </IsNotNull>
          <IsNotNull Property="queryVar.doubleValue != null">
            and A_${orLocal}OR${orIndex}.DOUBLE_
            <Include RefId="executionVariableOperator" />
            #{queryVar.doubleValue}
          </IsNotNull>
          <!-- Null variable type -->
          <IsNotNull Property="queryVar.textValue == null &amp;&amp; queryVar.textValue2 == null &amp;&amp; queryVar.longValue == null &amp;&amp; queryVar.doubleValue == null">
            <Switch>
              <Case Property="queryVar.operator.equals('NOT_EQUALS')">
                and (A_${orLocal}OR${orIndex}.TEXT_ is not null or A_${orLocal}OR${orIndex}.TEXT2_ is not null or A_${orLocal}OR${orIndex}.LONG_ is not null or A_${orLocal}OR${orIndex}.DOUBLE_ is not null or A_${orLocal}OR${orIndex}.BYTEARRAY_ID_ is not null)
              </Case>
              <Default>
                and A_${orLocal}OR${orIndex}.TEXT_ is null and A_${orLocal}OR${orIndex}.TEXT2_ is null and A_${orLocal}OR${orIndex}.LONG_ is null and A_${orLocal}OR${orIndex}.DOUBLE_ is null and A_${orLocal}OR${orIndex}.BYTEARRAY_ID_ is null
              </Default>
            </Switch>
          </IsNotNull>
        </For>
      </For>
    </Where>
  </Statement>

  <Statement Id="selectHistoricTaskInstancesByQueryCriteriaSql">
    from ACT_HI_TASKINST RES
    <Include RefId="commonSelectHistoricTaskInstancesByQueryCriteriaSql"/>
  </Statement>

  <Statement Id="selectHistoricTaskInstancesWithVariablesByQueryCriteriaSql">
    from ACT_HI_TASKINST RES
    <Switch>
      <Case Property="includeTaskLocalVariables &amp;&amp; includeProcessVariables">
        left outer join ACT_HI_VARINST VAR ON RES.ID_ = VAR.TASK_ID_ or (RES.PROC_INST_ID_ = VAR.EXECUTION_ID_ and VAR.TASK_ID_ is null)
      </Case>
      <Default>
        <IsTrue Property="includeTaskLocalVariables">
          left outer join ACT_HI_VARINST VAR ON RES.ID_ = VAR.TASK_ID_
        </IsTrue>
        <IsTrue Property="includeProcessVariables">
          left outer join ACT_HI_VARINST VAR ON RES.PROC_INST_ID_ = VAR.EXECUTION_ID_ and VAR.TASK_ID_ is null
        </IsTrue>
      </Default>
    </Switch>
    <Include RefId="commonSelectHistoricTaskInstancesByQueryCriteriaSql"/>
  </Statement>

  <Select Id="selectHistoricTaskInstance" ResultMap="historicTaskInstanceResultMap">
    select * from ACT_HI_TASKINST where ID_ = #{historicTaskInstanceId}
  </Select>

  
  <Select Id="selectHistoricTaskInstancesByProcessInstanceId"  ResultMap="historicTaskInstanceResultMap" >
    select *
    from ACT_HI_TASKINST 
    where PROC_INST_ID_ = #{processInstanceId}
  </Select>
  
  <Select Id="selectHistoricTasksByParentTaskId" ResultMap="historicTaskInstanceResultMap">
    select * from ACT_HI_TASKINST where PARENT_TASK_ID_ = #{parentTaskId}
  </Select>

  <Select Id="selectHistoricTaskInstanceIdsByProcessInstanceId">
    select ID_
    from ACT_HI_TASKINST
    where PROC_INST_ID_ = #{processInstanceId}
  </Select>

  <Select Id="selectHistoricTaskInstancesByQueryCriteria" ResultMap="historicTaskInstanceResultMap">
    ${limitBefore}
    select distinct RES.* ${limitBetween}
    <Include RefId="selectHistoricTaskInstancesByQueryCriteriaSql"/>
    ${orderBy}
    ${limitAfter}
  </Select>

  <Select Id="selectHistoricTaskInstanceCountByQueryCriteria">
    select count(DISTINCT RES.ID_)
    <Include RefId="selectHistoricTaskInstancesByQueryCriteriaSql"/>
  </Select>

  <Select Id="selectHistoricTaskInstancesWithVariablesByQueryCriteria" ResultMap="historicTaskInstanceAndVariablesResultMap">
    ${limitBefore}
    select distinct RES.*,
    VAR.ID_ as VAR_ID_, VAR.NAME_ as VAR_NAME_, VAR.VAR_TYPE_ as VAR_TYPE_, VAR.REV_ as VAR_REV_,
    VAR.PROC_INST_ID_ as VAR_PROC_INST_ID_, VAR.EXECUTION_ID_ as VAR_EXECUTION_ID_, VAR.TASK_ID_ as VAR_TASK_ID_,
    VAR.BYTEARRAY_ID_ as VAR_BYTEARRAY_ID_, VAR.DOUBLE_ as VAR_DOUBLE_,
    VAR.TEXT_ as VAR_TEXT_, VAR.TEXT2_ as VAR_TEXT2_, VAR.LAST_UPDATED_TIME_ as VAR_LAST_UPDATED_TIME_, VAR.LONG_ as VAR_LONG_
    ${limitBetween}
    <Include RefId="selectHistoricTaskInstancesWithVariablesByQueryCriteriaSql"/>
    ${orderBy}
    ${limitAfter}
  </Select>

  <Select Id="selectHistoricTaskInstancesWithVariablesByQueryCriteria_mssql_or_db2" ResultMap="historicTaskInstanceAndVariablesResultMap">
    ${limitBefore}
    select distinct TEMPRES_ID_ as ID_,
    TEMPRES_PROC_DEF_ID_ as PROC_DEF_ID_, TEMPRES_PROC_INST_ID_ as PROC_INST_ID_, TEMPRES_EXECUTION_ID_ as EXECUTION_ID_,
    TEMPRES_NAME_ as NAME_, TEMPRES_PARENT_TASK_ID_ as PARENT_TASK_ID_,
    TEMPRES_DESCRIPTION_ as DESCRIPTION_, TEMPRES_OWNER_ as OWNER_, TEMPRES_ASSIGNEE_ as ASSIGNEE_,
    TEMPRES_START_TIME_ as START_TIME_, TEMPRES_CLAIM_TIME_ as CLAIM_TIME_, TEMPRES_END_TIME_ as END_TIME_,
    TEMPRES_DURATION_ as DURATION_, TEMPRES_TASK_DEF_KEY_ as TASK_DEF_KEY_, TEMPRES_FORM_KEY_ as FORM_KEY_,
    TEMPRES_PRIORITY_ as PRIORITY_, TEMPRES_DUE_DATE_ as DUE_DATE_, TEMPRES_CATEGORY_ as CATEGORY_,
    TEMPRES_DELETE_REASON_ as DELETE_REASON_,
    TEMPVAR_ID_ as VAR_ID_, TEMPVAR_NAME_ as VAR_NAME_, TEMPVAR_TYPE_ as VAR_TYPE_, TEMPVAR_REV_ as VAR_REV_,
    TEMPVAR_PROC_INST_ID_ as VAR_PROC_INST_ID_, TEMPVAR_EXECUTION_ID_ as VAR_EXECUTION_ID_, TEMPVAR_TASK_ID_ as VAR_TASK_ID_,
    TEMPVAR_BYTEARRAY_ID_ as VAR_BYTEARRAY_ID_, TEMPVAR_DOUBLE_ as VAR_DOUBLE_,
    TEMPVAR_TEXT_ as VAR_TEXT_, TEMPVAR_LAST_UPDATED_TIME_ as VAR_LAST_UPDATED_TIME_, TEMPVAR_TEXT2_ as VAR_TEXT2_, TEMPVAR_LONG_ as VAR_LONG_
    ${limitOuterJoinBetween}
    RES.ID_ as TEMPRES_ID_, RES.PROC_DEF_ID_ as TEMPRES_PROC_DEF_ID_, RES.PROC_INST_ID_ as TEMPRES_PROC_INST_ID_,
    RES.EXECUTION_ID_ as TEMPRES_EXECUTION_ID_, RES.NAME_ as TEMPRES_NAME_ , RES.PARENT_TASK_ID_ as TEMPRES_PARENT_TASK_ID_,
    RES.DESCRIPTION_ as TEMPRES_DESCRIPTION_, RES.OWNER_ as TEMPRES_OWNER_, RES.ASSIGNEE_ as TEMPRES_ASSIGNEE_,
    RES.START_TIME_ as TEMPRES_START_TIME_, RES.END_TIME_ as TEMPRES_END_TIME_, RES.CLAIM_TIME_ as TEMPRES_CLAIM_TIME_,
    RES.DURATION_ as TEMPRES_DURATION_, RES.TASK_DEF_KEY_ as TEMPRES_TASK_DEF_KEY_,
    RES.FORM_KEY_ as TEMPRES_FORM_KEY_, RES.PRIORITY_ as TEMPRES_PRIORITY_,
    RES.DUE_DATE_ as TEMPRES_DUE_DATE_, RES.CATEGORY_ as TEMPRES_CATEGORY_, RES.DELETE_REASON_ as TEMPRES_DELETE_REASON_,
    VAR.ID_ as TEMPVAR_ID_, VAR.NAME_ as TEMPVAR_NAME_, VAR.VAR_TYPE_ as TEMPVAR_TYPE_, VAR.REV_ as TEMPVAR_REV_,
    VAR.PROC_INST_ID_ as TEMPVAR_PROC_INST_ID_, VAR.EXECUTION_ID_ as TEMPVAR_EXECUTION_ID_, VAR.TASK_ID_ as TEMPVAR_TASK_ID_,
    VAR.BYTEARRAY_ID_ as TEMPVAR_BYTEARRAY_ID_, VAR.DOUBLE_ as TEMPVAR_DOUBLE_,
    VAR.TEXT_ as TEMPVAR_TEXT_, VAR.TEXT2_ as TEMPVAR_TEXT2_, VAR.LAST_UPDATED_TIME_ as TEMPVAR_LAST_UPDATED_TIME_, VAR.LONG_ as TEMPVAR_LONG_
    <Include RefId="selectHistoricTaskInstancesWithVariablesByQueryCriteriaSql"/>
    ${orderBy}
    ${limitAfter}
  </Select>

  <Select Id="selectHistoricTaskInstanceByNativeQuery" ResultMap="historicTaskInstanceResultMap">
    <IsEqual Property="resultType == 'LIST_PAGE'">
      ${limitBefore}
    </IsEqual>
    ${sql}
    <IsEqual Property="resultType == 'LIST_PAGE'">
      ${limitAfter}
    </IsEqual>
  </Select>

  <Select Id="selectHistoricTaskInstanceByNativeQuery_mssql_or_db2" ResultMap="historicTaskInstanceResultMap">
    <IsEqual Property="resultType == 'LIST_PAGE'">
      ${limitBeforeNativeQuery}
    </IsEqual>
    ${sql}
    <IsEqual Property="resultType == 'LIST_PAGE'">
      ${limitAfter}
    </IsEqual>
  </Select>

  <Select Id="selectHistoricTaskInstanceCountByNativeQuery">
    ${sql}
  </Select>

</SmartSqlMap>
