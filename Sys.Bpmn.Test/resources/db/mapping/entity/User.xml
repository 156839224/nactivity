<?xml version="1.0" encoding="UTF-8" ?> 

<SmartSqlMap Scope="org.activiti.engine.impl.persistence.entity.UserEntityImpl"  xmlns="http://SmartSql.net/schemas/SmartSqlMap.xsd">

  <!-- USER RESULTMAP -->

  <ResultMap Id="userResultMap" ResultType="org.activiti.engine.impl.persistence.entity.UserEntityImpl,Sys.Bpm.Engine">
    <Result Property="id" Column="ID_" />
    <Result Property="revision" Column="REV_" />
    <Result Property="firstName" Column="FIRST_" />
    <Result Property="lastName" Column="LAST_" />
    <Result Property="email" Column="EMAIL_" />
    <Result Property="password" Column="PWD_" />
    <Result Property="pictureByteArrayRef" Column="PICTURE_ID_" />
  </ResultMap>

  <!-- USER INSERT -->

  <Insert Id="insertUser">
    insert into ACT_ID_USER (ID_, REV_, FIRST_, LAST_, EMAIL_, PWD_)
    values (
      @id,
      1,
      @firstName,
      @lastName,
      @email,
      @password
    )
  </Insert>

  <Insert Id="bulkInsertUser">
    INSERT INTO ACT_ID_USER (ID_, REV_, FIRST_, LAST_, EMAIL_, PWD_) VALUES 
      <For Property="list" Key="user" Separator=",">
        (@id,
         1,
         @firstName,
         @lastName,
         @email,
         @password)
      </For>
  </Insert>

  <!-- USER UPDATE -->

  <Update Id="updateUser">
    update ACT_ID_USER set
      REV_ = @revisionNext,
      FIRST_ = @firstName,
      LAST_ = @lastName,
      EMAIL_ = @email,
      PWD_ = @password,
      PICTURE_ID_ = @pictureByteArrayRef
    where ID_ = @id
      and REV_ = @revision
  </Update>
  
  <!-- USER DELETE -->

  <Delete Id="deleteUser">
    delete from ACT_ID_USER where ID_ = @id and REV_ = @revision
  </Delete>
  
  <!-- USER SELECT -->
  
  <Statement Id="selectUserByQueryCriteriaSql">
    from ACT_ID_USER RES 
    <IsNotNull Property="groupId != null">
      inner join ACT_ID_MEMBERSHIP M on RES.ID_ = M.USER_ID_
      inner join ACT_ID_GROUP G on M.GROUP_ID_ = G.ID_
    </IsNotNull>
    <Where>
      <IsNotNull Property="id != null">
        RES.ID_ = @id
      </IsNotNull>
      <IsNotNull Property="firstName != null">
        and RES.FIRST_ = @firstName
      </IsNotNull>
      <IsNotNull Property="firstNameLike != null">
        and RES.FIRST_ like @firstNameLike${wildcardEscapeClause}
      </IsNotNull>
      <IsNotNull Property="lastName != null">
        and RES.LAST_ = @lastName
      </IsNotNull>
      <IsNotNull Property="lastNameLike != null">
        and RES.LAST_ like @lastNameLike${wildcardEscapeClause}
      </IsNotNull>
      <IsNotNull Property="fullNameLike != null">
        and (RES.FIRST_ like @fullNameLike${wildcardEscapeClause} or RES.LAST_ like @fullNameLike${wildcardEscapeClause})
      </IsNotNull>
      <IsNotNull Property="email != null">
        and RES.EMAIL_ = @email
      </IsNotNull>
      <IsNotNull Property="emailLike != null">
        and RES.EMAIL_ like @emailLike${wildcardEscapeClause}
      </IsNotNull>
      <IsNotNull Property="groupId != null">
        and G.ID_ = @groupId
      </IsNotNull>
      <IsNotNull Property="procDefId != null">
        and exists (select ID_ from ACT_RU_IDENTITYLINK where PROC_DEF_ID_ = @procDefId and USER_ID_=RES.ID_ )
      </IsNotNull>
      
    </Where>
  </Statement>

  <Select Id="selectUserById" ResultMap="userResultMap">
    select * from ACT_ID_USER where ID_ = @id
  </Select>
    
  <Select Id="selectUserByQueryCriteria" ResultMap="userResultMap">
  	${limitBefore}
    select RES.* ${limitBetween}
    <Include RefId="selectUserByQueryCriteriaSql" />
    ${orderBy}
    ${limitAfter}
  </Select>
  
   <Select Id="selectUserCountByQueryCriteria" resultType="long">
    select count(RES.ID_)
    <Include RefId="selectUserByQueryCriteriaSql" />
  </Select>

  <Select Id="selectUserByNativeQuery" ResultMap="userResultMap">
    <IsNotNull Property="resultType == 'LIST_PAGE'">
      ${limitBefore}
    </IsNotNull>
    ${sql}
    <IsNotNull Property="resultType == 'LIST_PAGE'">
      ${limitAfter}
    </IsNotNull>
  </Select>

  <Select Id="selectUserByNativeQuery_mssql_or_db2" ResultMap="userResultMap">
    <IsNotNull Property="resultType == 'LIST_PAGE'">
      ${limitBeforeNativeQuery}
    </IsNotNull>
    ${sql}
    <IsNotNull Property="resultType == 'LIST_PAGE'">
      ${limitAfter}
    </IsNotNull>
  </Select>

  <Select Id="selectUserCountByNativeQuery" resultType="long">
    ${sql}
  </Select>
  
</SmartSqlMap>