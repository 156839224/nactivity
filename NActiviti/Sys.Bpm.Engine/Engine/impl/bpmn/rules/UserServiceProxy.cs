///////////////////////////////////////////////////////////
//  UserServiceProxy.cs
//  Implementation of the Class UserServiceProxy
//  Generated by Enterprise Architect
//  Created on:      30-1月-2019 8:32:00
//  Original author: 张楠
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using Sys.Workflow.Engine.Bpmn.Rules;
using System.Net.Http;
using Newtonsoft.Json;
using System.Threading.Tasks;

namespace Sys.Workflow.Engine.Bpmn.Rules
{
    public class UserServiceProxy : IUserServiceProxy
    {
        private readonly HttpClient httpClient;

        public string UserServiceProxyBaseUrl { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="userServiceProxyBaseUrl">WebApi服务基地址</param>
        public UserServiceProxy(string userServiceProxyBaseUrl)
        {
            this.UserServiceProxyBaseUrl = userServiceProxyBaseUrl;

            HttpClientHandler handler = new HttpClientHandler();
            httpClient = new HttpClient(handler)
            {
                BaseAddress = new Uri(userServiceProxyBaseUrl)
            };
        }

        /// 
        /// <param name="apiUrl"></param>
        /// <param name="parameter"></param>
        public IList<IUserInfo> GetUsers(string apiUrl, object parameter)
        {
            HttpResponseMessage response = httpClient.PostAsync(apiUrl, new StringContent(JsonConvert.SerializeObject(parameter), Encoding.UTF8, "application/json")).GetAwaiter().GetResult();

            return JsonConvert.DeserializeObject<IList<IUserInfo>>(response.Content.ReadAsStringAsync().Result);
        }
    }
}