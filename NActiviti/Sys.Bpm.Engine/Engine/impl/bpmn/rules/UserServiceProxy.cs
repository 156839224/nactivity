///////////////////////////////////////////////////////////
//  UserServiceProxy.cs
//  Implementation of the Class UserServiceProxy
//  Generated by Enterprise Architect
//  Created on:      30-1月-2019 8:32:00
//  Original author: 张楠
///////////////////////////////////////////////////////////

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Sys.Net.Http;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace Sys.Workflow.Engine.Bpmn.Rules
{
    public class UserServiceProxy : IUserServiceProxy
    {
        private readonly IHttpClientProxy httpProxy;

        public string UserServiceProxyBaseUrl { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="userServiceProxyBaseUrl">WebApi服务基地址</param>
        public UserServiceProxy(string userServiceProxyBaseUrl, IHttpClientProxy httpProxy)
        {
            this.UserServiceProxyBaseUrl = userServiceProxyBaseUrl;
            this.httpProxy = httpProxy;
            this.httpProxy.HttpClient.BaseAddress = new Uri(userServiceProxyBaseUrl);
        }

        /// <summary>
        /// 获取系统用户
        /// </summary>
        /// <param name="apiUrl"></param>
        /// <param name="parameter"></param>
        public async Task<IList<IUserInfo>> GetUsers(string apiUrl, object parameter)
        {
            JArray users = await this.httpProxy.PostAsync<JArray>(apiUrl, new StringContent(JsonConvert.SerializeObject(parameter), Encoding.UTF8, "application/json"));

            return new List<IUserInfo>(users.ToObject<UserInfo[]>());
        }

        /// <summary>
        /// 获取系统用户
        /// </summary>
        /// <param name="parameter">条件参数</param>
        /// <returns></returns>
        public async Task<IList<IUserInfo>> GetUsers(object parameter)
        {
            return await GetUsers("api/workflowusers", parameter);
        }
    }
}