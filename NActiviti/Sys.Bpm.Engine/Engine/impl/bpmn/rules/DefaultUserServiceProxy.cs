///////////////////////////////////////////////////////////
//  UserServiceProxy.cs
//  Implementation of the Class UserServiceProxy
//  Generated by Enterprise Architect
//  Created on:      30-1月-2019 8:32:00
//  Original author: 张楠
///////////////////////////////////////////////////////////

using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Sys.Workflow.Engine.Impl.Identities;
using Sys.Workflow.Engine.Api;
using Sys.Net.Http;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace Sys.Workflow.Engine.Bpmn.Rules
{
    /// <summary>
    /// 默认用户服务代理
    /// </summary>
    public class DefaultUserServiceProxy : IUserServiceProxy
    {
        private readonly IHttpClientProxy httpProxy;

        private readonly ExternalConnectorProvider connectorProvider;

        private readonly ILogger logger;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpProxy"></param>
        /// <param name="connectorProvider"></param>
        /// <param name="loggerFactory"></param>
        public DefaultUserServiceProxy(IHttpClientProxy httpProxy,
            ExternalConnectorProvider connectorProvider,
            ILoggerFactory loggerFactory)
        {
            this.httpProxy = httpProxy;
            this.connectorProvider = connectorProvider;
            logger = loggerFactory.CreateLogger<DefaultUserServiceProxy>();
        }

        /// <summary>
        /// 获取系统用户
        /// </summary>
        /// <param name="parameter">条件参数</param>
        /// <returns></returns>
        public async Task<IList<IUserInfo>> GetUsers(object parameter)
        {
            return await GetUsers(connectorProvider.GetUserByUser, parameter).ConfigureAwait(false);
        }

        /// <summary>
        /// 获取系统用户 query = {idList}
        /// </summary>
        /// <param name="apiUrl"></param>
        /// <param name="parameter"></param>
        public async Task<IList<IUserInfo>> GetUsers(string apiUrl, object parameter)
        {
            //this.httpProxy.SetHttpClientRequestAccessToken(apiWorkflowEngine, "");

            IUserInfo[] users = await httpProxy.PostAsync<UserInfo[]>(apiUrl, parameter).ConfigureAwait(false);

            return new List<IUserInfo>(users ?? new UserInfo[0]);
        }

        /// <summary>
        /// 获取系统用户 query = {id:string}
        /// </summary>
        /// <param name="userId"></param>
        public async Task<IUserInfo> GetUser(string userId)
        {
            return await GetUser(connectorProvider.GetUser, userId).ConfigureAwait(false);
        }


        /// <summary>
        /// 获取系统用户  query = {id:string}
        /// </summary>
        /// <param name="apiUrl"></param>
        /// <param name="userId"></param>
        public async Task<IUserInfo> GetUser(string apiUrl, string userId)
        {
            if (string.IsNullOrWhiteSpace(userId))
            {
                throw new ArgumentNullException("userId");
            }

            IUserInfo user;
            try
            {
                user = await this.httpProxy.PostAsync<UserInfo>(apiUrl, new { id = userId }).ConfigureAwait(false);
            }
            catch (Exception ex)
            {
                logger.LogWarning(ex, "invoke user failed: userId");

                user = Authentication.AuthenticatedUser;
            }

            return user;
        }
    }
}