///////////////////////////////////////////////////////////
//  GetBookmarkRuleProvider.cs
//  Implementation of the Class GetBookmarkRuleProvider
//  Generated by Enterprise Architect
//  Created on:      30-1月-2019 8:32:00
//  Original author: 张楠
///////////////////////////////////////////////////////////
///
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using org.activiti.bpmn.model;
using org.activiti.engine.@delegate;
using org.activiti.engine.impl.context;
using org.activiti.engine.impl.persistence.entity;
using Sys;
using Sys.Workflow;
using Sys.Workflow.Engine.Bpmn.Rules;
using System;
using System.Collections.Generic;
using System.Linq;

namespace org.activiti.engine.impl.bpmn.listener
{
    /// <summary>
    /// 会签任务监听器,侦听节点任务开始事件,然后根据会签策略从业务服务拉取相关的人员。
    /// 会签角色是指当前节点执行人,根据节点设置规则获取执行人.
    /// 1.发起者规则,指当前节点执行人.策略名:GetExecutor.
    /// 2.用户规则,指系统内的用户.策略名:GetUser.
    /// 3.岗位规则,对系统内的登录用户或组织人员按照岗位职责分类的一种方式.
    /// 该规则将读取指定岗位下的所有用户.策略名:GetDuty.
    /// 3.部门规则,读取指定部门下的所有用户.策略名:GetDept.
    /// 4.发起者下属,指组织人员行政上下级的归属关系,读取该发起者所有的下属人员.策略名:GetUnderling.
    /// 5.发起者直接汇报对象,上下级结构不在已行政关系为主,而是根据岗位职责形成的一种上下级汇报关系.
    /// 比如组建项目团队时,团队内的成员在项目进行期内的上级领导归属为项目负责人,而该负责人并不一定和干系人存在行政上的上下级关系.策略名:GetDirectReporter.
    /// 6.发起者部门领导,指组织人员行政上下级的归属关系,读取发起者的部门领导.策略名:GetDeptLeader.
    /// </summary>
    public class DelegateCountersignExecutionListener : IExecutionListener
    {
        private readonly ILogger<DelegateCountersignExecutionListener> logger =
            ProcessEngineServiceProvider.LoggerService<DelegateCountersignExecutionListener>();

        /// <summary>
        /// 侦听接收通知处理
        /// </summary>
        /// <param name="execution"></param>
        public void notify(IExecutionEntity execution)
        {
            if (execution.getVariable("countersignUsers") == null)
            {
                List<IUserInfo> users = new List<IUserInfo>();
                IList<ExtensionElement> exActors = null;
                if ((execution.CurrentFlowElement?.ExtensionElements.TryGetValue("property", out exActors)).GetValueOrDefault(false))
                {
                    string str = exActors.GetAttributeValue("actors");

                    QueryBookmark[] actors = JsonConvert.DeserializeObject<QueryBookmark[]>(str);

                    IGetBookmarkRuleProvider ruleProvider = ProcessEngineServiceProvider.Resolve<IGetBookmarkRuleProvider>();

                    foreach (QueryBookmark query in actors)
                    {
                        IGetBookmarkRule rule = ruleProvider.CreateBookmarkRule(query.RuleName.ToString());
                        rule.Condition = query;
                        users.AddRange(Context.ProcessEngineConfiguration.CommandExecutor.execute(rule));
                    }
                }

                if (users.Count == 0)
                {
                    throw new NoneCountersignUsersException(execution.CurrentFlowElement.Name);
                }

                execution.setVariable("countersignUsers", users.Select(x => x.Id).Distinct().ToArray());
            }
        }
    }
}
