<?xml version="1.0" encoding="UTF-8" ?>

<SmartSqlMap Scope="org.activiti.engine.impl.persistence.entity.GroupEntityImpl"  xmlns="http://SmartSql.net/schemas/SmartSqlMap.xsd">

  <!-- GROUP RESULTMAP -->

  <ResultMap Id="groupResultMap" ResultType="org.activiti.engine.impl.persistence.entity.GroupEntityImpl,Sys.Bpm.Engine">
    <Result Property="Id" Column="ID_" />
    <Result Property="Revision" Column="REV_" />
    <Result Property="Name" Column="NAME_" />
    <Result Property="Type" Column="TYPE_" />
  </ResultMap>

  <!-- GROUP INSERT -->

  <Insert Id="insertGroup" parameterType="org.activiti.engine.impl.persistence.entity.GroupEntity">
    insert into ACT_ID_GROUP (ID_, REV_, NAME_, TYPE_)
    values (
    @id,
    1,
    @name,
    @type
    )
  </Insert>

  <Insert Id="bulkInsertGroup" parameterType="java.util.List">
    insert into ACT_ID_GROUP (ID_, REV_, NAME_, TYPE_)
    values
    <For Property="list" Key="group" Separator=",">
      (@id,
      1,
      @name,
      @type)
    </For>
  </Insert>

  <!-- GROUP UPDATE -->

  <Update Id="updateGroup" parameterType="org.activiti.engine.impl.persistence.entity.GroupEntity">
    update ACT_ID_GROUP set
    REV_ = @revisionNext,
    NAME_ = @name,
    TYPE_ = @type
    where ID_ = @id
    and REV_ = @revision
  </Update>

  <!-- GROUP DELETE -->

  <Statement Id="selectGroupByQueryCriteriaSql">
    from ACT_ID_GROUP RES
    <IsNotNull Property="userId">
      inner join ACT_ID_MEMBERSHIP M on RES.ID_ = M.GROUP_ID_
      inner join ACT_ID_USER U on M.USER_ID_ = U.ID_
    </IsNotNull>
    <Where>
      <IsNotNull Property="id">
        RES.ID_ = @id
      </IsNotNull>
      <IsNotNull Property="name">
        and RES.NAME_ = @name
      </IsNotNull>
      <IsNotNull Property="nameLike">
        and RES.NAME_ like @nameLike${wildcardEscapeClause}
      </IsNotNull>
      <IsNotNull Property="type">
        and RES.TYPE_ = @type
      </IsNotNull>
      <IsNotNull Property="userId">
        and U.ID_ = @userId
      </IsNotNull>
      <IsNotNull Property="procDefId">
        and exists (select ID_ from ACT_RU_IDENTITYLINK where PROC_DEF_ID_ = @procDefId and GROUP_ID_=RES.ID_ )
      </IsNotNull>

    </Where>
  </Statement>

  <Delete Id="deleteGroup" parameterType="org.activiti.engine.impl.persistence.entity.GroupEntity">
    delete from ACT_ID_GROUP where ID_ = @id and REV_ = @revision
  </Delete>

  <!-- GROUP SELECT -->

  <Select Id="selectGroup" parameterType="string" resultMap="groupResultMap">
    select * from ACT_ID_GROUP where ID_ = @id
  </Select>

  <Select Id="selectGroupsByUserId" parameterType="org.activiti.engine.impl.db.ListQueryParameterObject" resultMap="groupResultMap">
    select g.*
    from ACT_ID_GROUP g, ACT_ID_MEMBERSHIP membership
    where g.ID_ = membership.GROUP_ID_
    and membership.USER_ID_ = @userId
  </Select>

  <Select Id="selectGroupsByUserIdAndGroupType" parameterType="org.activiti.engine.impl.db.ListQueryParameterObject" resultMap="groupResultMap">
    select g.*
    from ACT_ID_GROUP g, ACT_ID_MEMBERSHIP membership
    where g.ID_ = membership.GROUP_ID_
    and membership.USER_ID_ = @userId
    <IsNotNull Property="groupType">
      and g.TYPE_ = @groupType
    </IsNotNull>
  </Select>

  <Select Id="selectGroupByQueryCriteria" parameterType="org.activiti.engine.impl.GroupQueryImpl" resultMap="groupResultMap">
    ${limitBefore}
    select RES.* ${limitBetween}
    <Include RefId="selectGroupByQueryCriteriaSql" />
    ${orderBy}
    ${limitAfter}
  </Select>

  <Select Id="selectGroupCountByQueryCriteria" parameterType="org.activiti.engine.impl.GroupQueryImpl" resultType="long">
    select count(RES.ID_)
    <Include RefId="selectGroupByQueryCriteriaSql" />
  </Select>

  <Select Id="selectGroupByNativeQuery" parameterType="java.util.Map" resultMap="groupResultMap">
    <IsEqual Property="resultType" CompareValue="LIST_PAGE">
      ${limitBefore}
    </IsEqual>
    ${sql}
    <IsEqual Property="resultType" CompartValue="LIST_PAGE">
      ${limitAfter}
    </IsEqual>
  </Select>

  <Select Id="selectGroupByNativeQuery_mssql_or_db2" parameterType="java.util.Map" resultMap="groupResultMap">
    <IsEqual Property="resultType" CompareValue="LIST_PAGE">
      ${limitBeforeNativeQuery}
    </IsEqual>
    ${sql}
    <IsEqual Property="resultType" CompareValue="LIST_PAGE">
      ${limitAfter}
    </IsEqual>
  </Select>

  <Select Id="selectGroupCountByNativeQuery" parameterType="java.util.Map" resultType="long">
    ${sql}
  </Select>

</SmartSqlMap>